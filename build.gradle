plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        /*maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }*/
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        /*mappings loom.layered() {
            officialMojangMappings()
            //parchment("org.parchmentmc.data:parchment-1.20.1:2023.08.06@zip")
        }*/
        // The following line declares the yarn mappings you may select this one as well.
        mappings "net.fabricmc:yarn:${rootProject.yarn_version}:v2"
    }
}

tasks.register('clean-builds') {
    dependsOn(':forge:clean',':fabric:clean')
    doLast {
        println "Cleaned previous build"
    }
}

tasks.register('buildBoth') {
    dependsOn('clean-builds', ':fabric:build', ':forge:build')
    doLast {
        def modVersion = rootProject.mod_version
        def minecraftVersion = rootProject.minecraft_version
        def fabricBuildDir = project(':fabric').file('build/libs')
        def forgeBuildDir = project(':forge').file('build/libs')
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }

        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('Merged')
                rename { fileName ->
                    "Nucleus-${modVersion}-${minecraftVersion}-fabric.jar"
                }
            }
        }

        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('Merged')
                rename { fileName ->
                    "Nucleus-${modVersion}-${minecraftVersion}-forge.jar"
                }
            }
        }

        println "Builds completed"
    }
}

tasks.register('buildMerged') {
    dependsOn('clean-builds',':fabric:build', ':forge:build')
    doLast {
        println "Builds completed"
    }
    finalizedBy ':mergeJars'
}

tasks.register('buildAll') {
    dependsOn('buildBoth')
    doLast {
        println "Merging..."
    }
    finalizedBy ':mergeJars'
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
