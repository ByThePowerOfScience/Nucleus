plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://maven.ladysnake.org/releases' }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    if ("${rootProject.use_trinkets}" == "true")
        modApi("dev.emi:trinkets:${rootProject.trinkets_version}")
    else
        modCompileOnlyApi("dev.emi:trinkets:${rootProject.trinkets_version}")

    // implementation(include("blue.endless:jankson:${rootProject.jankson_version}"))

    annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")
    implementation(include("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null

    archiveFileName = "nucleus-${project.name}-${rootProject.minecraft_version}-${rootProject.mod_version}.jar"
    destinationDirectory.set(file("$rootDir/build/${rootProject.mod_version}/fabric"))
}
remapSourcesJar {
    archiveFileName = "nucleus-${project.name}-${rootProject.minecraft_version}-${rootProject.mod_version}-sources.jar"
    destinationDirectory.set(file("$rootDir/build/${rootProject.mod_version}/fabric"))
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.register('githubPublish') {
    finalizedBy ':fabric:publish'
    group = 'publishing'

    doLast {
        publishing.publications.mavenFabric.groupId = "com.${rootProject.github}"
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.minecraft_version + "-" + rootProject.mod_version

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url uri(file("$rootDir/build/repository"))
        }
    }
}
